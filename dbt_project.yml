name: 'snowplow_ecommerce'

version: '0.3.0'
config-version: 2

require-dbt-version: [">=1.3.0", "<2.0.0"]

profile: 'default'

model-paths: ["models"]
test-paths: ["tests"]
macro-paths: ["macros"]
docs-paths: ["docs"]
asset-paths: ["assets"]

target-path: "target"
clean-targets:
    - "target"
    - "dbt_modules"
    - "dbt_packages"

vars:
  snowplow_ecommerce:
    # Sources
    # snowplow__atomic_schema: 'atomic' # Only set if not using 'atomic' schema for Snowplow events data
    # snowplow__database:  # Only set if not using target.database for Snowplow events data -- WILL BE IGNORED FOR DATABRICKS
    snowplow__events: "{{ source('atomic', 'events') }}"
    snowplow__ecommerce_event_names: ['snowplow_ecommerce_action']
    snowplow__number_checkout_steps: 4
    snowplow__number_category_levels: 4
    snowplow__categories_separator: '/'
    snowplow__use_product_quantity: false

    # Variables - Standard Config
    snowplow__start_date: '2020-01-01'
    snowplow__backfill_limit_days: 30
    snowplow__app_id: []
    snowplow__derived_tstamp_partitioned: true
    # Variables - Advanced Config
    snowplow__lookback_window_hours: 6
    snowplow__session_lookback_days: 730
    snowplow__days_late_allowed: 3
    snowplow__max_session_days: 3
    snowplow__upsert_lookback_days: 30
    snowplow__query_tag: "snowplow_dbt"
    snowplow__incremental_materialization: "snowplow_incremental"
    snowplow__dev_target_name: 'dev'
    snowplow__allow_refresh: false
    snowplow__query_tag: 'snowplow_dbt'
    # Variables - Databricks Only
    # Add the following variable to your dbt project's dbt_project.yml file
    # Depending on the use case it should either be the catalog (for Unity Catalog users from databricks connector 1.1.1 onwards) or the same value as your snowplow__atomic_schema (unless changed it should be 'atomic')
    # snowplow__databricks_catalog: 'hive_metastore'



# Completely or partially remove models from the manifest during run start.
on-run-start:
  - "{{ snowplow_ecommerce_delete_from_manifest(var('models_to_remove',[])) }}"

# Update manifest table with last event consumed per sucessfully executed node/model
on-run-end:
  - "{{ snowplow_utils.snowplow_incremental_post_hook('snowplow_ecommerce') }}"


# Tag 'snowplow_ecommerce_incremental' allows snowplow_incremental_post_hook to identify Snowplow models
# and add their last sucessfull collector_tstamp to the manifest.
models:
  snowplow_ecommerce:
    +materialized: table
    base:
      manifest:
        +schema: "snowplow_manifest"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
        bigquery:
          enabled: "{{ target.type == 'bigquery' | as_bool() }}"
        databricks:
          enabled: "{{ target.type in ['databricks', 'spark'] | as_bool() }}"
        snowflake:
          enabled: "{{ target.type == 'snowflake' | as_bool() }}"
    carts:
      +schema: "derived"
      +tags: "snowplow_ecommerce_incremental"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
    checkouts:
      +schema: "derived"
      +tags: "snowplow_ecommerce_incremental"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
    products:
      +schema: "derived"
      +tags: "snowplow_ecommerce_incremental"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
        bigquery:
          enabled: "{{ target.type == 'bigquery' | as_bool() }}"
        databricks:
          enabled: "{{ target.type in ['databricks', 'spark'] | as_bool() }}"
        snowflake:
          enabled: "{{ target.type == 'snowflake' | as_bool() }}"
    sessions:
      +schema: "derived"
      +tags: "snowplow_ecommerce_incremental"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
    transactions:
      +schema: "derived"
      +tags: "snowplow_ecommerce_incremental"
      scratch:
        +schema: "scratch"
        +tags: "scratch"
